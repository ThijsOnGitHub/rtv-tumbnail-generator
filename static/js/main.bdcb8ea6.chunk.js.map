{"version":3,"sources":["logo.svg","TumbnailCanvas.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TumbnailCanvas","inputRef","React","createRef","handleInputChange","bind","imagePaste","draw","scrollHandler","rtvLogo","Image","src","addEventListener","imageInfo","x","y","width","height","state","title","image","imageShow","event","target","value","type","checked","name","this","setState","url","navigator","clipboard","read","clipboardItems","clipboardItem","types","includes","console","log","getType","blob","URL","createObjectURL","changeDrawImage","error","message","ctx","current","getContext","fillStyle","fillRect","drawImage","path","Path2D","moveTo","lineTo","fill","font","text","fontface","xPosition","yPosition","maxSize","context","fontsize","measureText","fillText","fitTextOnCanvas","extra","deltaY","onChange","onClick","style","border","onWheel","on","ref","canvas","link","document","createElement","body","appendChild","href","toDataURL","download","click","removeChild","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdcb8ea6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\n\r\nclass TumbnailCanvas extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        this.inputRef = React.createRef();\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.imagePaste=this.imagePaste.bind(this)\r\n        this.draw=this.draw.bind(this)\r\n        this.scrollHandler=this.scrollHandler.bind(this)\r\n\r\n        this.rtvLogo=new Image()\r\n        this.rtvLogo.src='../../logoRtv.png'\r\n        this.rtvLogo.addEventListener('load',()=>{\r\n            this.draw()\r\n        })\r\n\r\n        this.imageInfo={x:0,y:0,width:1280,height:720}\r\n\r\n        this.state={\r\n            title:\"Hallo\",\r\n            image:null,\r\n            imageShow:null\r\n        }\r\n    }\r\n\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        }, this.draw)\r\n    }\r\n\r\n    changeDrawImage(url){\r\n        this.setState({imageShow:url},()=>{\r\n            this.imageShow=new Image()\r\n            this.imageShow.src=this.state.imageShow\r\n            this.imageShow.addEventListener('load',()=>{\r\n                this.imageInfo.width=this.imageShow.width\r\n                this.imageInfo.height=this.imageShow.height\r\n                this.draw()\r\n            })\r\n        })\r\n    }\r\n\r\n    async imagePaste(){\r\n        try {\r\n            const clipboardItems = await navigator.clipboard.read();\r\n            for (const clipboardItem of clipboardItems) {\r\n                try {\r\n                    for (const type of clipboardItem.types) {\r\n                        if(type.includes(\"image\")){\r\n                            console.log(type)\r\n                            const blob = await clipboardItem.getType(type);\r\n                            var url=URL.createObjectURL(blob)\r\n                            this.changeDrawImage(url)\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.error(e, e.message);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(e, e.message);\r\n        }\r\n\r\n    }\r\n\r\n    draw(){\r\n\r\n        function fitTextOnCanvas(text,fontface,xPosition,yPosition,maxSize,context){\r\n\r\n            // start with a large font size\r\n            var fontsize=50;\r\n\r\n            // lower the font size until the text fits the canvas\r\n            do{\r\n                fontsize--;\r\n                context.font=fontsize+\"px \"+fontface;\r\n            }while(context.measureText(text).width>maxSize)\r\n\r\n            // draw the text\r\n            context.fillText(text,xPosition,yPosition);\r\n\r\n\r\n\r\n        }\r\n\r\n        var ctx=this.inputRef.current.getContext('2d')\r\n\r\n        ctx.fillStyle=\"white\"\r\n        ctx.fillRect(0,0,1280,720)\r\n\r\n        if(this.state.imageShow!==null){\r\n            ctx.drawImage(this.imageShow,this.imageInfo.x,this.imageInfo.y,this.imageInfo.width,this.imageInfo.height)\r\n        }\r\n\r\n\r\n        var height=120\r\n        var path=new Path2D()\r\n        ctx.fillStyle=\"white\"\r\n        path.moveTo(1280,0)\r\n        path.lineTo(0,0)\r\n        path.lineTo(1280,height)\r\n        path.lineTo(1280,0)\r\n        ctx.fill(path)\r\n\r\n\r\n        var path=new Path2D()\r\n        ctx.fillStyle=\"red\"\r\n        path.moveTo(0,720)\r\n        path.lineTo(1280,720)\r\n        path.lineTo(0,720-height)\r\n        path.lineTo(0,720)\r\n        ctx.fill(path)\r\n\r\n        ctx.fillStyle=\"white\"\r\n        ctx.font=\"60px Segoe UI\"\r\n\r\n\r\n        fitTextOnCanvas(this.state.title,\"fira sans\",15,690,480,ctx);\r\n\r\n\r\n\r\n\r\n        var width=250\r\n        ctx.drawImage(this.rtvLogo,950,20,width,(width*206)/878)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    scrollHandler(event){\r\n        var extra=1.01\r\n        if(event.deltaY<0){\r\n            extra=0.99\r\n        }\r\n        this.imageInfo.width *=extra\r\n        this.imageInfo.height*=extra\r\n        this.draw()\r\n        console.log(this.imageInfo)\r\n    }\r\n\r\n    dragHandler(event){\r\n        console.log(event)\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form>\r\n                    <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.handleInputChange}/>\r\n                    <input type=\"file\" name=\"image\" value={this.state.image} onChange={this.handleInputChange}/>\r\n                </form>\r\n                <button onClick={this.imagePaste}>Image van Klembord</button>\r\n\r\n                <canvas style={{border: '2px solid black'}} width=\"1280px\" height=\"720px\" onWheel={this.scrollHandler} on ref={this.inputRef}></canvas>\r\n                <button onClick={()=>\r\n                {\r\n                    var canvas=this.inputRef.current\r\n\r\n                    var link=document.createElement('a')\r\n                    document.body.appendChild(link)\r\n                    link.href=canvas.toDataURL()\r\n                    link.download=`Banner ${this.state.title}.png`\r\n                    link.click()\r\n                    document.body.removeChild(link)\r\n                }\r\n                }>Download Banner</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TumbnailCanvas","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport TumbnailCanvas from \"./TumbnailCanvas\";\n\nfunction App() {\n  return (\n        <TumbnailCanvas />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}